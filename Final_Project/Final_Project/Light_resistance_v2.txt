/****************************************************************************
 * @file     main.c
 * @version  V2.0
 * $Revision: 1 $
 * $Date: 14/12/08 11:49a $
 * @brief    Perform A/D Conversion with ADC single mode.
 * @note
 * Copyright (C) 2014 Nuvoton Technology Corp. All rights reserved.
 *
 ******************************************************************************/
#include <stdio.h>
#include "NUC100Series.h"
#define PLL_CLOCK       50000000

/*---------------------------------------------------------------------------------------------------------*/
/* Define Function Prototypes                                                                              */
/*---------------------------------------------------------------------------------------------------------*/
void SYS_Init(void);
void UART0_Init(void);
void AdcSingleModeTest(void);

int g_InitValueRed=0;
int g_InitValueBlue=0;


/*---------------------------------------------------------------------------------------------------------*/
/* Define global variables and constants                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
volatile uint32_t g_u32AdcIntFlag;

void SYS_Init(void)
{
    /*---------------------------------------------------------------------------------------------------------*/
    /* Init System Clock                                                                                       */
    /*---------------------------------------------------------------------------------------------------------*/

    /* Enable Internal RC 22.1184MHz clock */
    CLK_EnableXtalRC(CLK_PWRCON_OSC22M_EN_Msk);

    /* Waiting for Internal RC clock ready */
    CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);

    /* Switch HCLK clock source to Internal RC and HCLK source divide 1 */
    CLK_SetHCLK(CLK_CLKSEL0_HCLK_S_HIRC, CLK_CLKDIV_HCLK(1));

    /* Enable external XTAL 12MHz clock */
    CLK_EnableXtalRC(CLK_PWRCON_XTL12M_EN_Msk);

    /* Waiting for external XTAL clock ready */
    CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);

    /* Set core clock as PLL_CLOCK from PLL */
    CLK_SetCoreClock(PLL_CLOCK);

    /* Enable UART module clock */
    CLK_EnableModuleClock(UART0_MODULE);

    /* Enable ADC module clock */
    CLK_EnableModuleClock(ADC_MODULE);

    /* Select UART module clock source */
    CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_PLL, CLK_CLKDIV_UART(1));

    /* ADC clock source is 22.1184MHz, set divider to 7, ADC clock is 22.1184/7 MHz */
    CLK_SetModuleClock(ADC_MODULE, CLK_CLKSEL1_ADC_S_HIRC, CLK_CLKDIV_ADC(7));

    /*---------------------------------------------------------------------------------------------------------*/
    /* Init I/O Multi-function                                                                                 */
    /*---------------------------------------------------------------------------------------------------------*/

    /* Set GPB multi-function pins for UART0 RXD and TXD */
    SYS->GPB_MFP &= ~(SYS_GPB_MFP_PB0_Msk | SYS_GPB_MFP_PB1_Msk);
    SYS->GPB_MFP |= SYS_GPB_MFP_PB0_UART0_RXD | SYS_GPB_MFP_PB1_UART0_TXD;

    /* Disable the GPA0 - GPA3 digital input path to avoid the leakage current. */
    GPIO_DISABLE_DIGITAL_PATH(PA, 0xF);

    /* Configure the GPA0 - GPA3 ADC analog input pins */
    SYS->GPA_MFP &= ~(SYS_GPA_MFP_PA0_Msk | SYS_GPA_MFP_PA1_Msk | SYS_GPA_MFP_PA2_Msk | SYS_GPA_MFP_PA3_Msk) ;
    SYS->GPA_MFP |= SYS_GPA_MFP_PA0_ADC0 | SYS_GPA_MFP_PA1_ADC1 | SYS_GPA_MFP_PA2_ADC2 | SYS_GPA_MFP_PA3_ADC3 ;
    SYS->ALT_MFP1 = 0;

}

/*---------------------------------------------------------------------------------------------------------*/
/* Init UART                                                                                               */
/*---------------------------------------------------------------------------------------------------------*/
void UART0_Init()
{
    /* Reset IP */
    SYS_ResetModule(UART0_RST);

    /* Configure UART0 and set UART0 Baudrate */
    UART_Open(UART0, 115200);
}
/*---------------------------------------------------------------------------------------------------------*/
/* ADC interrupt handler                                                                                   */
/*---------------------------------------------------------------------------------------------------------*/
void ADC_IRQHandler(void)
{
		
    g_u32AdcIntFlag = 1;
    ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT); /* clear the A/D conversion flag */
}

/*---------------------------------------------------------------------------------------------------------*/
/* MAIN function                                                                                           */
/*---------------------------------------------------------------------------------------------------------*/

void InitValue()
{
		uint32_t u32ChannelCount;
		int32_t  i32ConversionData;
		int i,loop=10;
		for(i=0;i<loop;i++)
		{		
						ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_CONTINUOUS, 0xF);
			
            /* Power on ADC module */
            ADC_POWER_ON(ADC);
			
            /* Clear the A/D interrupt flag for safe */
            ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
			
            /* Enable the ADC interrupt */
						ADC_EnableInt(ADC, ADC_ADF_INT);
            NVIC_EnableIRQ(ADC_IRQn);

            /* Reset the ADC interrupt indicator and Start A/D conversion */
            //g_u32AdcIntFlag = 0;

            ADC_START_CONV(ADC);
						
           /* Wait conversion done */
            while(!ADC_GET_INT_FLAG(ADC, ADC_ADF_INT));

						/* Clear the A/D interrupt flag for safe */
            ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);

            /* Get the conversion result of the ADC channel 2 */
						
						   for(u32ChannelCount = 1; u32ChannelCount < 2; u32ChannelCount++)
            {
                i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, u32ChannelCount);
                printf("Sample value of channel %d(red) :0x%X (%d)\n", u32ChannelCount, i32ConversionData, i32ConversionData);
								g_InitValueRed += i32ConversionData;
						}
						
           /* Wait conversion done */
            while(!ADC_GET_INT_FLAG(ADC, ADC_ADF_INT));
						
						/* Stop A/D conversion */
           ADC_STOP_CONV(ADC);
			
						for(u32ChannelCount = 2; u32ChannelCount < 3; u32ChannelCount++)
            {
                i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, u32ChannelCount);
                printf("Sample value of channe2 %d(blue):0x%X (%d)\n", u32ChannelCount, i32ConversionData, i32ConversionData);
								g_InitValueBlue += i32ConversionData;
            }
						
					  /* Clear the A/D interrupt flag for safe */
            ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
						
						printf("---------------------------------------------\n");
						CLK_SysTickDelay(1000000);
		}
		g_InitValueRed=g_InitValueRed/loop;
		g_InitValueBlue=g_InitValueBlue/loop;
		printf("\n--------------------Init Done--------------------\n");
		printf("Initial value of resistence for Red: %d\n",g_InitValueRed);
		printf("Initial value of resistence for Blue: %d\n",g_InitValueBlue);

}

void 	light_Cmp(){
		uint8_t  u8Option;
		uint32_t u32ChannelCount;
		int32_t  i32ConversionData;
		int32_t red;
		int32_t blue;
	
		//int32_t delaytime;
    printf("\n");
    printf("+----------------------------------------------------------------------+\n");
    printf("|                      ADC Light_Resistance 		code                     |\n");
    printf("+----------------------------------------------------------------------+\n");

    while(1)
    {
						red=0,blue=0;
						ADC_Open(ADC, ADC_ADCR_DIFFEN_SINGLE_END, ADC_ADCR_ADMD_CONTINUOUS, 0xF);

            /* Power on ADC module */
            ADC_POWER_ON(ADC);

            /* Clear the A/D interrupt flag for safe */
            ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);

            /* Enable the ADC interrupt */
						ADC_EnableInt(ADC, ADC_ADF_INT);
            NVIC_EnableIRQ(ADC_IRQn);

            /* Reset the ADC interrupt indicator and Start A/D conversion */
            //g_u32AdcIntFlag = 0;

            ADC_START_CONV(ADC);
						
           /* Wait conversion done */
            while(!ADC_GET_INT_FLAG(ADC, ADC_ADF_INT));

						/* Clear the A/D interrupt flag for safe */
            ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);

            /* Get the conversion result of the ADC channel 2 */
						
						   for(u32ChannelCount = 1; u32ChannelCount < 2; u32ChannelCount++)
            {
                i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, u32ChannelCount);
                printf("Conversion result of channel %d(red) :0x%X (%d)\n", u32ChannelCount, i32ConversionData, i32ConversionData);
								red=i32ConversionData;
            }
						
           /* Wait conversion done */
            while(!ADC_GET_INT_FLAG(ADC, ADC_ADF_INT));
						
						/* Stop A/D conversion */
           ADC_STOP_CONV(ADC);
			
						for(u32ChannelCount = 2; u32ChannelCount < 3; u32ChannelCount++)
            {
                i32ConversionData = ADC_GET_CONVERSION_DATA(ADC, u32ChannelCount);
                printf("Conversion result of channe2 %d(blue):0x%X (%d)\n", u32ChannelCount, i32ConversionData, i32ConversionData);
								blue=i32ConversionData;
            }
					  /* Clear the A/D interrupt flag for safe */
            ADC_CLR_INT_FLAG(ADC, ADC_ADF_INT);
						
						
						if( (  red - g_InitValueRed  )  < ( blue - g_InitValueBlue) )
						{
							printf("Recevied Red --> signal 1\n");
						}
						else{
							printf("Recevied Blue --> signal 0\n");
						}
						
						printf("---------------------------------------------\n");
						   /* Disable the ADC interrupt */
            //ADC_DisableInt(ADC, ADC_ADF_INT);

						/*
            i32ConversionData2 = ADC_GET_CONVERSION_DATA(ADC, 1);
						i32ConversionData3 = ADC_GET_CONVERSION_DATA(ADC, 3);
						
						printf("----------------------------------------\n");
            printf("Conversion result of channel red: (%d)\n", i32ConversionData2);
						printf("Conversion result of channe3 blue: (%d)\n", i32ConversionData3);
						printf("----------------------------------------\n");
						*/
						CLK_SysTickDelay(1000000);
						CLK_SysTickDelay(1000000);
    }
}


int main(void)
{
	uint8_t  u8Option;
    /* Unlock protected registers */
    SYS_UnlockReg();

    /* Init System, IP clock and multi-function I/O */
    SYS_Init();

    /* Lock protected registers */
    SYS_LockReg();

    /* Init UART0 for printf */
    UART0_Init();

    /*---------------------------------------------------------------------------------------------------------*/
    /* SAMPLE CODE                                                                                             */
    /*---------------------------------------------------------------------------------------------------------*/

		GPIO_SetMode(PC,BIT12,GPIO_PMD_OUTPUT);
		GPIO_SetMode(PC,BIT13,GPIO_PMD_OUTPUT);
		GPIO_SetMode(PC,BIT14,GPIO_PMD_OUTPUT);
		GPIO_SetMode(PC,BIT15,GPIO_PMD_OUTPUT);
		printf("Select input mode:\n");
    printf("  [1] Initial\n");
    printf("  [2] Start!\n");
    u8Option = getchar();
    //printf("\nSystem clock rate: %d Hz", SystemCoreClock);
		
		while(1){
			u8Option = getchar();
			
			if(u8Option=='1'){
			printf("---------Initial for a few second\n---------\n");
			InitValue();	
			}
			else if(u8Option=='2'){
			printf("\n---------Start Receive---------\n");
			light_Cmp();
			}
	}
		
    /* Disable ADC module */
    ADC_Close(ADC);

    /* Disable ADC IP clock */
    CLK_DisableModuleClock(ADC_MODULE);

    /* Disable External Interrupt */
    NVIC_DisableIRQ(ADC_IRQn);
    printf("\nExit ADC sample code\n");
    while(1);

}



