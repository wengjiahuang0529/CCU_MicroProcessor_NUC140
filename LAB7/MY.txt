/******************************************************************************
 * @file     main.c
 * @version  V2.00
 * $Revision: 3 $
 * $Date: 15/04/20 2:56p $
 * @brief
 *           Implement SPI Master loop back transfer.
 *           This sample code needs to connect SPI0_MISO0 pin and SPI0_MOSI0 pin together.
 *           It will compare the received data with transmitted data.
 * @note
 * Copyright (C) 2014 Nuvoton Technology Corp. All rights reserved.
*****************************************************************************/
#include <stdio.h>
#include "NUC100Series.h"

#define PLL_CLOCK           50000000

#define TEST_COUNT             8
//This is a list of some of the registers available on the ADXL345.
char POWER_CTL = 0x2d;  //Power Control Register (0x2d,0x08)
char DATA_FORMAT = 0x31;   //(0x31,0x0b)
char FIFO_CTL=0x38;  //(0x38, 0x80)
char DATAX0 = 0x32; //X-Axis Data 0
char DATAX1 = 0x33; //X-Axis Data 1
char DATAY0 = 0x34; //Y-Axis Data 0
char DATAY1 = 0x35; //Y-Axis Data 1
char DATAZ0 = 0x36; //Z-Axis Data 0
char DATAZ1 = 0x37; //Z-Axis Data 1


void SPI_Write(uint8_t addr,uint8_t data)
{
	SPI_SET_SS0_LOW(SPI2);
	SPI2->SSR |= 0x1;
	
	 /* Write to TX register */
	SPI_WRITE_TX0(SPI2,addr);
	//SPI2->TX[0]=addr;

	SPI_TRIGGER(SPI2);

	while(SPI_IS_BUSY(SPI2));

	SPI_WRITE_TX0(SPI2,addr);
  SPI_TRIGGER(SPI2);
	while(SPI_IS_BUSY(SPI2));
	
	SPI_ClearTxFIFO(SPI2); //Clear TX FIFO buffer.
	SPI_SET_SS0_HIGH(SPI2);
	//SPI2->SSR &= 0xFFFFFFFE;

}

uint8_t SPI_Read(uint8_t addr)
{
		uint8_t ReadData;
		SPI_SET_SS0_LOW(SPI2);
		SPI2->SSR |= 0x1;
		
		SPI_WRITE_TX0(SPI2,addr|0x80);
		//SPI2->TX[0]=(addr|0x80);
	
		SPI_TRIGGER(SPI2);
		while(SPI_IS_BUSY(SPI2));
	
		SPI_TRIGGER(SPI2); //set Go_Busy bit = 1
		while(SPI_IS_BUSY(SPI2));
		
		ReadData=SPI_READ_RX0(SPI2);
		SPI_ClearRxFIFO(SPI2);
		SPI_SET_SS0_HIGH(SPI2);
		//SPI2->SSR &= 0xFFFFFFFE;
		return ReadData;
}

void ADXL_init()
{
		int offset[3],loop=30,i,j;
	
		printf("\nADXL init \n");
			//offset
		SPI_Write(0x1e,0);
		SPI_Write(0x1f,0);
		SPI_Write(0x20,0);
	
		SPI_Write(DATA_FORMAT,0x0b);
		SPI_Write(POWER_CTL,0x08);
		SPI_Write(FIFO_CTL,0x80);
		
	
		for(j=0;j<3000000;j++){}
		for(j=0;j<loop;j++) //set the offset value. First, we need sample the value.
		{
				for(i=0;i<3;i++){
						offset[i] += ((SPI_Read(0x33+(2*i))<<8) | SPI_Read(0x32+(2*i)));
						//The output data is twos complement, with DATAx0 as the least significant byte and DATAx1 as the most significant byte
				}
		}
		SPI_Write(0x1e,-1*offset[0]/(4*loop));   
		SPI_Write(0x1f,-1*offset[1]/(4*loop));
		SPI_Write(0x20,-1*(offset[2]-256)/(4*loop));
}

/* Function prototype declaration */
void SYS_Init(void);
void SPI_Init(void);

/* ------------- */
/* Main function */
/* ------------- */
int main(void)
{
		float axis[3]={0};
		int i;
    /* Unlock protected registers */
    SYS_UnlockReg();

    /* Init system, peripheral clock and multi-function I/O */
    SYS_Init();

    /* Lock protected registers */
    SYS_LockReg();

    /* Configure UART0: 115200, 8-bit word, no parity bit, 1 stop bit. */
    UART_Open(UART0, 115200);

    /* Init SPI */
    SPI_Init();
	
    printf("\n\n");
    printf("+--------------------------------------------------------------------+\n");
    printf("|                   NUC100 SPI Driver Sample Code                    |\n");
    printf("+--------------------------------------------------------------------+\n");
    printf("\n");
    printf("\nThis sample code using SPI2 to communicate with ADXL345.\n");
    printf(" SPI2 configuration:\n");
    printf("     Master mode; data width 8 bits.\n");
    printf(" I/O connection:\n");

    ADXL_init();
	
		printf("SPI_Read: %x\n",SPI_Read(0x00));
	
		while(1)
		{
				for(i=0;i<3;i++){
				axis[i]=((float)((SPI_Read(0x33+2*i) << 8) | SPI_Read(0x32+2*i))/256);
				//default sensitivity is (+-)2g , so we need divide 256 to get (+-)1g
			}
			CLK_SysTickDelay(1000000);
			printf("x=%.2f	y=%.2f	z=%.2f\n",axis[0],axis[1],axis[2]);
		}
		
    /* Close SPI0 */
    SPI_Close(SPI0);

    while(1);
}

void SYS_Init(void)
{
    /* Enable Internal RC 22.1184 MHz clock */
    CLK_EnableXtalRC(CLK_PWRCON_OSC22M_EN_Msk);

    /* Waiting for Internal RC clock ready */
    CLK_WaitClockReady(CLK_CLKSTATUS_OSC22M_STB_Msk);

    /* Enable external 12 MHz XTAL */
    CLK_EnableXtalRC(CLK_PWRCON_XTL12M_EN_Msk);

    /* Waiting for clock ready */
    CLK_WaitClockReady(CLK_CLKSTATUS_XTL12M_STB_Msk);

    /* Set core clock as PLL_CLOCK from PLL */
    CLK_SetCoreClock(PLL_CLOCK);

    /* Select HXT as the clock source of UART0 */
    CLK_SetModuleClock(UART0_MODULE, CLK_CLKSEL1_UART_S_HXT, CLK_CLKDIV_UART(1));

    /* Select HCLK as the clock source of SPI0 */
    CLK_SetModuleClock(SPI2_MODULE, CLK_CLKSEL1_SPI2_S_HCLK, MODULE_NoMsk);//////******/////////
    /* Enable UART peripheral clock */
    CLK_EnableModuleClock(UART0_MODULE);
    /* Enable SPI0 peripheral clock */
    CLK_EnableModuleClock(SPI2_MODULE);

    /*---------------------------------------------------------------------------------------------------------*/
    /* Init I/O Multi-function                                                                                 */
    /*---------------------------------------------------------------------------------------------------------*/

    /* Set PB multi-function pins for UART0 RXD and TXD */
    SYS->GPB_MFP = SYS_GPB_MFP_PB0_UART0_RXD | SYS_GPB_MFP_PB1_UART0_TXD;

    /* Setup SPI0 multi-function pins */
    SYS->GPD_MFP = SYS_GPD_MFP_PD0_SPI2_SS0 | SYS_GPD_MFP_PD1_SPI2_CLK | SYS_GPD_MFP_PD2_SPI2_MISO0 | SYS_GPD_MFP_PD3_SPI2_MOSI0;//////******/////////
    SYS->ALT_MFP = SYS_ALT_MFP_PD0_SPI2_SS0 | SYS_ALT_MFP_PD1_SPI2_CLK | SYS_ALT_MFP_PD2_SPI2_MISO0 | SYS_ALT_MFP_PD3_SPI2_MOSI0;//////******/////////
		
		/* Update System Core Clock */
    /* User can use SystemCoreClockUpdate() to calculate SystemCoreClock and CyclesPerUs automatically. */
    SystemCoreClockUpdate();
}

void SPI_Init(void)
{
    /*---------------------------------------------------------------------------------------------------------*/
    /* Init SPI                                                                                                */
    /*---------------------------------------------------------------------------------------------------------*/
    /* Configure as a master, clock idle low, 32-bit transaction, drive output on falling clock edge and latch input on rising edge. */
    /* Set IP clock divider. SPI clock rate = 2 MHz */
	
		/*uint32_t SPI_Open(SPI_T *spi,
                  uint32_t u32MasterSlave,
                  uint32_t u32SPIMode,
                  uint32_t u32DataWidth,
                  uint32_t u32BusClock)*/
    SPI_Open(SPI2, SPI_MASTER, SPI_MODE_3, 0x08, 2000000);   /* mode3 => !< CLKP=1; RX_NEG=0; TX_NEG=1 */
		
		SPI2->SSR=(SPI2->SSR & (~(SPI_SSR_SS_LVL_Msk | SPI_SSR_SSR_Msk))) | (SPI_SS0 | SPI_SS_ACTIVE_LOW );
    
	/* Enable the automatic hardware slave select function. Select the SPI0_SS0 pin and configure as low-active. */
		//SPI_EnableAutoSS(SPI2, SPI_SS0, SPI_SS_ACTIVE_LOW);
		SPI_DisableAutoSS(SPI2);
		SPI_SET_SS0_HIGH(SPI2);
}

/*** (C) COPYRIGHT 2014 Nuvoton Technology Corp. ***/

